JMS是什么:java message service

消息形式:
	1.一对一:queue
	2.一对多:topic
	
消息队列的应用场景:
异步处理:
	场景说明:用户注册后，需要发注册右键和注册短息
	传统处理方式:
		1.串行处理:
		将注册信息写入数据库成功后，发送注册邮件，再发送注册短信，三个全部完成了，返回给客户端
		2.并行处理:
		将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信，三个全部完成了，返回给客户端
	消息队列:
		注册邮件，发送短信写入消息队列后，直接返回(说实话还是不明白这到底为什么提高了效率)
		由于每个会话是多线程的，所以提高了效率 
发送端创建步骤:
	1.创建连接工厂，JMS用来创建连接
	2.使用连接工厂获取一个连接对象
	3.启动连接
	4.使用连接获取一个会话对象
	5.根据会话对象获取一个Queue获取消息的目的地
	6.根据会话获取一个消息的生产者
	7.设置消息生产者的递送模型(自己学习设置为不持久化就好了)
	8.发送消息
	9.提交发送
	
接收端的创建步骤:
	1.创建连接工厂
	2.获取连接对象
	3.开启连接
	4.获取会话对象
	5.使用会话对象获取目的地
	6.使用会话对象获取一个消息消费者
	7.接收消息关闭连接


SLF4J是什么?
	是一个灵活的日志系统，提供一套接口，并没有确定指定你用的是哪个日志系统
	用户可以灵活决定自己使用哪个日志系统
这个还不会先欠着	

与spring整合设计:

需求:
	服务端有一个页面在文本呢框里面写一个消息，点击发送就可以发送到接收端的页面
	
服务端设计:
	1.选择一个以前写过的spring项目作为服务端
		vue-demo-server作为服务端
		今天先使用这个做，如果今天做完的早，就开始修改服务器端
		使用spring4实现，学习spring4中的新的注解
	1.5测试上面项目的包是否可用，导入activemq需要的包
	2.添加配置文件activemq-config.xml
		添加log4j.xml(这个可以先欠着)
	3.定义推送接口     PushService
	4.实现推送接口,一共三个实现类UserPushServiceImpl(一对一)  NewsPushServiceImpl(一对全部)
	 ClientPushServiceImpl(一对多)
	5.创建推送的控制器   PushController类
	一共三个请求
	6.实现前端页面点击按钮提交消息
	7.测试
		查看activeMQ页面是否有待发送的消息，有未被消费的下次则成功
	
为什么这个构造器注入只有value没有name,为什么要注入的值是user.service.queue--这个对列名
constructor-arg>
	<value>user.service.queue</value>
</constructor-arg>

 public ActiveMQQueue(String name)
/*    */   {
/* 39 */     super(name);
/*    */   }





















