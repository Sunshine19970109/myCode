1 MVC模式降低耦合度
	JSP中直接显示结果，然后修改处理业务逻辑直接在
Servlet中就可以了。

一、转发和重定向
	1 它们的相同点
	-都是解决两个WEB组件之间的跳转问题
	>WEB组件:Servlet/JSP
	2 它们的区别(*)
		1 重定向只给地址，你去哪个地方就可以了(不依赖)
		2转发是自己不会做，把问题和地址一起给别人解决(依赖)
	3 使用建议
	通常查询时用转发
	通常增加、修改、删除后重定向到查询
	

二、EL和JSTL
	1 它们的作用
	2 演示案例
	EL获取数据不需要导包，因为用了反射技术
	


jsp中的page指代的是什么?
	指代的是this,值jsp所翻译的servlet类，只要里面有get
	set方法同样可以存数据
	jsp翻译里面是有IO的操作的所以慢，但是只翻译一次
	如果有了servlet就不需要翻译了
	jsp中有9个隐含对象
	执行的顺序相当于是:
	直接访问servlet->jsp文件(文件中默认有9个对象)->翻译
	->找到对应的_jsp的servlet,返回给网页







怎么判断自己真正会写代码?
	等到你想到一个功能就能立马直接写出来的时候，就像你喝水一样
自然，而不是还要去查百度，看资料，做设计文档然后才一步一步写。
	每个小功能随时可以直接写出来，而不是老是查资料。

类反射技术?
	你只要知道类名就可以实例化对象，只要知道方法名就可以调用方法。



为什么需要EL表达式?
	JSP中嵌套的大量java代码增加了页面内容的复杂度，使得页面
不够简洁，不方便代码的维护
	为此Sun公司制定了JSP标签(类似于html标签)来代替Java代码
	Apache组织开发的一套标签库被Sun公司整合后，称为标准标签库
	(JSP Standard Tag Library 即 JSTL)，配合EL表达式，
	已达到减轻JSP文件的复杂度、方便维护JSP文件的目的

什么是EL表达式
	EL表达式是一套简单的计算规则，用于给JSP标签的属性赋值，也可以
直接用来输出。
	表达式也可以脱离标签单独使用

1 简述什么是转发?以及如何实现转发?
	一个Web组件(Servlet/JSP)将未完成的处理通过容器转交给
另一个Web组件继续完成
	常见情况:一个Servlet获得数据之后(比如通过调用dao),将这些
数据转发给JSP,由这个JSP来展现这些数据(比如，以表格的方式来实现)
	1 绑定数据到request对象
	request.setAttribute(String name,Object obj)
	name:绑定名
	obj:绑定值
	读取绑定值
	Object request.getAttribute(String name)
	如果绑定名对应的值不存在，返回null
	2 获得转发器
	RequestDispatcher rd = 
	request.getRequestDispatcher(String url)
	uri:转发的目的地，即将未完成的处理继续下去的另一个组件，
	比如一个JSP文件
	3 转发
	实现转发:rd.forward(request,response);
	通常情况下第二步和第三步合并为一行语句，如下:
	request.getRequestDispatcher(uri)
	.forward(request,response);

转发和重定向的区别?
	重定向是浏览器发送请求并收到响应以后再次向一个新的地址发请求，
转发是服务器收到请求后为了完成响应转到一个新的地址
	重定向中有两次请求对象，不能共享数据，转发只产生一次请求对象
且在组件间共享数据
	重定向后地址栏改变，而转发则不会
	重定向的新地址可以是任意地址，转发的新地址必须是同一个应用
内的某地址。

4 简述EL表达式的作用是什么?
	1 访问Bean属性
	通常情况下的JavaBean指的是一个公共类，含有一个空参的构造
方法，一些属性以及访问这些属性提供的get/set方法，方法名与属性名
需要符合一定的规范。
	使用EL表达式访问Bean属性时可使用如下两种方式
	方式一:${对象名.属性名}
	方式二:${对象名["属性名"]}
	如:${user.name}
	执行过程:容器会依次从pageContext,request,session,
	application中查找绑定名称为"user"的对象，找到后，调用
	"getName"方法，然后输出。
	其等价代码如下:
	<%
		User user = (User)request.getAttribute("user)
		out.print(user.getName());
	%>
	2 输出简单的运算结果
	3 获取请求参数
	${param.username}
	等价于request.getParameter("username");

5 ABC
6 简述JSTL的作用
	使用JSTL标签的作用是可以降低代码工作量，界面更加整洁，便于
维护。后台开发人员和前端开发人员可以分工合作，从而提高团队开发效率
	forEach标签的varStatus属性表示指定一个绑定名称，绑定值
是一个由容器创建的对象，该对象封装了当前迭代的状态。当绑定名称为index时
返回正在被迭代的对象的下标，下标从0开始】
7 ABC
8 简述自定义标签的步骤及标签的运行原理
	1 编写java类，继承SimpleTagSupport
	2 在doTag方法中添加出来逻辑
	3 配置标签说明文件
	容器依据JSP标签的命名空间找到标签的描述文件(.tld文件),
	然后依据标签名字找到标签类，接下来将该标签实例化
	容器会根据标签的属性给标签实例的属性赋值，然后调用标签实例的
doTag方法










