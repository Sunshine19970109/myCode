1.创建User类
	id   name realName  email  address createTime
	导入
	
创建数据库:
	ibatis
ibatis_zhugaohong_20180831
感想:
	radio这个单选按钮有一个属性
	是checked=false,而不是checked=checked
4200000126201807270743437887

一个项目其实是可以连接多个数据库的



补充1:
	在ibatis框架中一种新的获取sqlMapClient对象的方法
	TestDAOImpl extends SqlMapClientDaoSupport implements ITestBDao
	然后里面可以直接调用
		//这个返回一个sqlMapClient对象
		getSqlMapClientTemplate().queryForList()
		
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMapConfig
 PUBLIC "-//iBATIS.com//DTD SQL Map Config 2.0//EN"
 "http://www.ibatis.com/dtd/sql-map-config-2.dtd">

<sqlMapConfig>
	//加载数据库的配置文件
    <properties resource="config/db.properties" />  
	 //在设置settings节点进行详细的设计
	 <settings
	 //是否启用SqlMapClient上的缓存机制
	  cacheModelsEnabled="true"
	  //增强性能
	  //是否针对POJO启用字节码增强机getter/setter的调用效能，避免Reflect
	  //所带来的性能开销。同时，这也为Lazy Loading 带来提升。建议设置为"true"
	  //POJO指简单的javaBean,有getter和set方法就可以
	  enhancementEnabled="true"
	  //是否启用错误日志，在开发中建议设为true以方便调试
	  errorTracingEnabled=true;
	  lazyLoadingEnabled="true"
	  maxRequests="32"//最大请求数，(Statement并发数)
	  maxSessions="10"//最大会话数，即当前最大允许的并发SqlMapClient数
	  maxTransactions="5"//最大并发事务数
	  
	是否使用Statement命名空间。 
	这里的命名空间指的是映射文件中，sqlMap节的namespace属性，如在上例中针对t_use
	表的映射文件sqlMap节点： <sqlMap namespace="User"> 这里，指定了此sqlMap节点下
	定义的操作均属于"User"命名空间。 在useStatementNamespaces="true"的情况下，
	Statement调用需追加命名空间，如：sqlMap.update("User.updateUser",user); 
	否则直接通过Statement名称调用即可，如： sqlMap.update("updateUser",user); 
	但请注意此时需要保证所有映射文件中，Statement定义无重名。
	 useStatementNamespaces="false"//是否使用statement命名空间
	 />
 
	 <transactionManager type="JDBC" >
		  <dataSource type="SIMPLE">
		   <property name="JDBC.Driver" value="${driver}"/>
		   <property name="JDBC.ConnectionURL" value="${url}"/>
		   <property name="JDBC.Username" value="${user}"/>
		   <property name="JDBC.Password" value="${password}"/>
		  </dataSource>
	 </transactionManager>
 <sqlMap resource="mapper/User.xml" />
</sqlMapConfig>


idle--闲置的(挂起)

servlet中的参数配置
<init-param>
	<param-name>maxOnline</param-name>
	<param-value>3000</param-value>
</init-param>
<init-param>
	<param-name>log4jLocationConfig</param-name>
	<param-value>WEB-INF/classes/config/log4j.properties</param-value>
</init-param>

<load-on-startup>1</load-on-startup>
这个配置如果是1代表启动容器的时候，该servlet就要加载，也就是该servlet的init()
方法就要执行
当为负数的时候就会在有请求的时候才会加载，一般都直接加载，避免初始化出错
当值为正数的时候，值越小优先级越高

//初始化log4j
	private static Logger log = Logger.getLogger(UserServlet.class);
	@Override
	public void init() throws ServletException {
		//获取部署后的项目路径
		String prefix = this.getServletContext().getRealPath("/");
		//获取配置的相对路径
	    String file = this.getInitParameter("log4jLocationConfig");
	    System.out.println("prefile : "+prefix);
	    System.out.println("file : "+file);
	    if (file != null) {
	      PropertyConfigurator.configure(prefix+file);    
	    }
	}

		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("UTF-8");
		
function deleteUser(obj){
	console.log("删除");
	console.log($(obj).parent().parent().children('.userId').html());
	var id = $(obj).parent().parent().children(".userId").html();
	alert(id);
	$.ajax({
		url:'deleteUser.do?id='+id,
		type:'get',
		success:function(){
			location.href='selectUser.html';
			console.log('成功');
		},
		error:function(data){
			console.log(data);
		}
	});
	
}
		
		
-- 创建序列
create sequence seq_pf_customer_id start with 1 increment by 1;
select seq_pf_customer_id.nextval from dual

-- 创建触发器
create or replace trigger TRIGGER_PF_CUSTOMER
before insert on pf_customer
for each row
when(new.id is null)
begin
  SELECT seq_pf_customer_id.NEXTVAL into:new.id FROM dual;
END;		
		
		
		
		
		
