1 为什么写代码不要干想?
	1 人的脑子只能记住10步的思路，你也一样 
	2 但是也不是直接写代码，因为你都没有思路怎么写代码 
	3 这样即使你遇到问题也可以直接和别人说你卡在哪里了， 
	别人一看很清楚你的大问题，也能帮你解答。 
	解决方案: 
		1 如果比较复杂最好写一个文档，里面包含图等分析 
		2 如果比较简单可以写个多行注释分析一下设计步骤 

补充:
	parseDouble()和valueOf()的区别
	返回值不同，parseDouble()返回Double类型
	valueOf()返回double类型

二、重定向经典的使用场景
	1 解决互联网上2个网站之间的跳转问题 
	2 也经常这样用，解决一个项目内2个独立组件之间的跳转问题 
	3 重定向是一种特殊的状态:302,+目标 
	
三、访问路径
	1 项目部署的过程 
	注意:只有用maven导的包才能自动部署在tomcat服务器下 
	2 如何获取访问路径 
		项目名:getContextPath() 
		Servlet访问路径:getServletPath() 
		URI:getRequestURI() 
		URL:getRequestURL() 

3 URI和URL的区别
	1)狭义的理解(Java WEB 项目)
		URI:绝对路径
		URL:完整路径
	2)广义的理解(任意WEB项目)
		URI:资源的名字
		URL:资源的真名
		URI包含URL
	
4 如何配置Servlet访问路径?
	1) 精确匹配
		/hello---必须通过hello才能访问到Servlet
		此Servlet只能处理"/hello"这一个请求
	2) 通配符
		/*
		通过任何路径都能访问此Servlet
		此Servlet能处理一切请求
	3) 后缀
		*.abc
		通过".abc"为后缀的请求都能访问此Servlet
		此Servlet能够处理多个请求

5 如何使用一个Servlet处理多个请求

4 Servlet生命周期

五、ServletConfig和ServletContext
	1 他们的作用
	能够读取web.xml中为Servlet预制的参数
	2他们的区别
	config和Servlet是1对1的关系
	context和Servlet是1对多的关系
	若数据只给某个Servlet使用，则用config
	若数据给多个Servlet使用，则用context
	>他们的关系由服务器来保障
	
	3 config使用场景
	假设要开发一个网页游戏，若超过人数上限则要排队
	开发登陆功能LoginServlet
	人数上限应该是一个可配置的参数
	该参数由LoginServlet使用
	>由于该参数只是LoginServlet使用，由config读取即可
	
	4 context使用场景
	大部分的查询都具备分页功能
	分页需要一个参数，每页显示几条数据size
	该参数一般可配置，由于被众多查询功能复用，使用context读取
	
	5 context可以存取变量

补充:
	在并发时很多人同时访问UpServlet的时候，堆中的成员变量
可能会出问题，因为它只有一份。栈中的局部变量是没有问题的，因为每个
线程有自己的栈帧
	服务器是多线程并发的，虽然这个代码你没有写但是服务器的底层，
已经用IO和多线程帮你写好了。

怎么解决并发时修改成员变量的问题呢?
	1 加锁
		缺点:如果很多人访问的话会卡死
	2 抛异常，判断个数
		比如卖票

补充:
	服务器比较傻，只会调用无参构造器，所以servlet必须有无参
构造器


为什么知识离不开使用场景?
	每个知识的出现都是有原因的，可能是哪个大神某天遇到了哪个问题
热后特别需要一个好的解决方案，然后发明了一个好办法，这就是知识，我们
如果也有可能在将来遇到同样的问题，所以我们要学这个知识。 
	1 因为只有有了他的使用场景才会有需求 
	2 当一个人有了需求他才会有兴趣，才会主动学习 
	3 然后理解了这个知识解决这个问题的基础之上再可以思考其他的
	应用场景。 
	例如:假设我现在在哪里，干什么，遇到了什么问题。 
	结论: 
	作为人的思维学习一个知识比较好的步骤: 
	这个知识解决的问题->这个知识的作用->为什么能产生这个作用 
	底层的原理是什么 
	推论: 
	这样你预习课的时候应该预习的东西就出来了
	应该预习:这个知识解决什么问题->这个知识的作用

什么是重定向
	服务器收到一个请求，请求去另一个Servlet,然后服务器回复
	为浏览器建议一个相对路径的地址
	比如百度
	服务器向浏览器发送一个302状态码，及一个Location消息头
	(该消息头值是一个地址，称之为重定向地址)，浏览器收到后会立即
	向重定向地址发出请求。



