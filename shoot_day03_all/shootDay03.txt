Shoot射击游戏第一天:
1.class FlyingObject{
    image,width,height,x,y
  }
2.interface Enemy{
    int getScore();
  }
3.interface Award{
    DOUBLE_FILE,LIFE
    int getType();
  }
4.class Airplane extends 1 implements 2{
    speed
    Airplane(){}
    重写getScore()
  }
5.class Bee extends 1 implements 3{
    xSpeed,ySpeed,awardType
    Bee(){}
    重写getType()
  }
6.class Bullet extends 1{
    speed
    Bullet(int x,int y){}
  }
7.class Hero extends 1{
    life,doubleFire,images,index
    Hero(){}
  }
8.class ShootGame extends JPanel{ //面板
    WIDTH,HEIGHT
    background,start,pause,gameover
    airplane,bee,bullet,hero0,hero1
    static{}-------------------------完成构造方法

    main(){
      ...
      frame.setVisible(true); //1.可见 2.尽快调paint()
    }

    hero(Hero)
    flyings(FlyingObject[])
    bullets(Bullet[])
    ShootGame(){初始化对象}
    
    重写paint(g){
       画背景图
       paintHero(g);
       paintFlyingObjects(g);
       paintBullets(g);
    }
    paintHero(g){} //画英雄机
    paintFlyingObjects(g){} //画敌人
    paintBullets(g){} //画子弹
    
  }
9.敌人入场的实现步骤:
  1)main(){ game.action(); }
  2)action(){
      ...
      run(){ //10毫秒定时执行
        enteredAction(); //敌人入场
	    repaint();
      }
    }
  3)int index = 0;
    enteredAction(){ //10毫秒
      index++;
      if(index%40==0){  //40*10毫秒
        FlyingObject one = nextOne(); //创建一个敌人对象
        flyings = Arrays.copyOf(flyings,flyings.length+1); //扩容
        flyings[flyings.length-1] = one; //将敌人对象添加到敌人数组中
      }
    }
  4)nextOne(){
      生成0到19间的随机数
      为0时return new Bee();
      否则return new Airplane();
    }





Shoot射击游戏第二天:
1.飞行物走一步的实现步骤:
  1)FlyingObject----抽象方法step();
  2)Airplane,Bee,Bullet,Hero---重写step()
  3)action(){
      run(){
        enterAction();
	    stepAction();
	    repaint(); //重画
      }
    }
  4)stepAction(){
      遍历所有敌人,调用step()
      遍历所有子弹,调用step()
      hero.step();
    }
2.子弹入场的实现步骤:
  1)Hero---shoot()英雄机发射子弹
  2)action(){
      run(){
        ...
	    shootAction(); //发射子弹
	    repaint();
      }
    }
  3)int shootIndex = 0;
    shootAction(){ //10毫秒走一次
      shootIndex++;
      if(shootIndex%30==0){ //300毫秒
        调用Hero的shoot()得到发射出的子弹数组bs
	    将bullets扩容(+bs.length)
	    将bs追加到bullets数组中--System.arraycopy()
      }
    }
3.英雄机随着鼠标移动的实现步骤:
  1)Hero---moveTo(int x,int y)
  2)action(){
      MouseAdapter l = new MouseAdapter(){
         重写mouseMoved(){
	       获取鼠标的x和y
	       hero.moveTo(x,y); //移动
	     }
      };
      this.addMouseMotionListener(l);
      this.addMouseListener(l);

      run(){
        ...
      }
    }







Shoot射击游戏第三天:
1.删除越界的敌人和子弹的实现步骤:
  1)FlyingObject----abstract outOfBounds();
  2)Airplane,bee,bullet,Hero--重写outOfBounds()
  3)action(){
      run(){
        ...
	    outOfBoundsAction(); //删除越界的
	    repaint();
      }
    }
  4)outOfBoundsAction(){
      1)声明活着的数组
      2)遍历flyings/bullets数组
        判断对象是否不越界:
        若true:
          将对象添加到活着的数组中
      3)将活着的数组复制到flyings/bullets数组中
    }
2.子弹和敌人碰撞的实现步骤:
  1)FlyingObject---shootBy(Bullet b)
  2)Hero----addDoubleFire(),addLife()
  3)action(){
      run(){
        ...
	    bangAction(); //检查碰撞
	    repaint();
      }
    }
  4)bangAction(){ //所有子弹与所有敌人撞
      遍历所有子弹，将子弹传给bang()方法
    }
  5)bang(Bullet b){ //1发子弹与所有敌人撞
      遍历所有敌人，获取每一个敌人f
      判断f是否与b撞上了
      若撞上了:
        5.1)得分或得奖励
	      5.1.1)得到被撞敌人对象
	      5.1.2)判断是敌人还是奖励
	             若是敌人则增分
		         若是奖励则得奖励类型
		            判断不同的奖励类型：
		              增命或增火力值
	    5.2)将被撞对象从flyings中删除
	      5.2.1)将被撞敌人与最后一个元素交换(追尾并绕圈)
	      5.2.2)缩容---删除最后一个元素(被撞的对象)
    }
3.画分和画命的实现步骤:
  1)hero---getLife()获取命
  2)paint(g){
      ......
      paintScore(g); //画分和命
    }
  3)paintScore(g){
      设置颜色g.setColor(...)
      设置字体g.setFont(...)
      画分g.drawString(...);
      画命g.drawString(...);
    }
4.英雄机与敌人碰撞的实现步骤:
  1)Hero---boolean hit(FlyingObject other);
  2)Hero---substractLife()
           clearDoubleFire();
  3)action(){
      重写run(){
        ...
	    hitAction(); //检测英雄机与敌人撞
	    repaint();
      }
    }
  4)hitAction(){ //1个英雄机与所有敌人碰撞
      遍历所有敌人，获取每一个敌人f
      判断hero.hit(f){
        减命
	    火力值清零
	    删除被撞的敌人(交换，缩容)
      }
    }
  5)action(){
      重写run(){
        ...
	    checkGameOverAction(); //检测游戏结束
	    repaint();
      }
    }
  4)checkGameOverAction(){
      if(hero.getLife()<=0){ //游戏结束了
	    
      }
    }
  
5.画状态的实现步骤:
  1)START,RUNNING,PAUSE,GAME_OVER
    state=START;(存储当前状态)
  2)paint(){
      ...
      paintState(g);
    }
  3)paintState(g){
      START状态--贴start图
      PAUSE状态--贴pause图
      GAME_OVER状态--贴gameover图
    }
  4)run(){
      if(state==RUNNING){
        一堆action();
      }
      repaint();
    }
  5)mouseMoved(){
      if(state==RUNNING){
        获取x,y,调英雄机移动方法
      }
    }
  6)重写mouseClicked(){
      若为启动状态，则改为运行状态
      若为游戏结束状态，则:
        清理现场(hero,flyings,bullets,score)
        改为启动状态
    }
  7)checkGameOverAction(){
      if(hero.getLife()<=0){
        state=GAME_OVER;
      }
    }
  8)重写mouseExited(){
      if(state == RUNNING){
        state = PAUSE;
      }
    }
  9)重写mouseEntered(){
      if(state == PAUSE){
        state = RUNNING;
      }
    }


扩展功能:----原始功能非常清晰时再考虑
1.子弹与敌人撞上后，子弹也消失
2.BOSS机----打3发才死，死后得40分
3.大黄蜂----打5发才死，
            死后得60分，并且获取奖励


练习:
1.保证程序的正常运行
2.完成今天的五个功能重写一次









API











尽快的去适应老师的风格
























Shoot射击游戏第三天:
1.删除越界的飞行物
2.子弹与敌人(敌机+小蜜蜂)的碰撞
3.画分和画命
4.英雄机与敌人(敌机+小蜜蜂)的碰撞
5.画状态



四种状态:
1)启动状态--------------启动图.png
2)运行状态
3)暂停状态--------------暂停图.png
4)游戏结束状态----------游戏结束图.png



鼠标点击事件
1)启动时-------变运行
2)游戏结束时---变启动















hero.getLife()<=0










public void hitAction(){
  for(int i=0;i<flyings.length;i++){
    FlyingObject f = flyings[i];
    if(hero.hit(f)){ //撞上了
	  hero.subtractLife();
	  hero.clearDoubleFire();
      追尾并绕圈，再缩容
	}
  }
}














英雄机与敌人撞上后:
1.英雄机减命，同时，英雄机清空火力值
2.敌人消失


















class Hero{
  public boolean hit(FlyingObject obj){
    this:英雄机
	obj:敌人
  }
}

class FlyingObject{
  public boolean hitBy(Hero obj){
    this:敌人
	obj:英雄机
  }
}


















RGB:三原色、三基色

R:red红色
G:green绿色
B:blue蓝色

十六进制格式表示
0到9,ABCDEF

0xFF0000--------纯红
0x00FF00--------纯绿
0x0000FF--------纯蓝
0xA2F3D5--------














设置颜色
设置字体





set???()---------设置
get???()---------获取
is????()---------判断是否









保证最后一个元素就是被撞的敌人

FlyingObject t = flyings[index];
flyings[index] = flyings[flyings.length-1];
flyings[flyings.length-1] = t;
flyings = Arrays.copyOf(flyings,flyings.length-1);













敌人消失------将被撞的敌人从flyings中删除





敌人为什么能在页面上---------敌人在flyings数组中
如何让敌人不在页面上---------从flyings中删除













//所有子弹与所有敌人撞
public void bangAction(){
  for(int i=0;i<bullets.length;i++){
    Bullet b = bullets[i];
	bang(b);
  }
}

int score = 0; //得分
//一个子弹与所有敌人撞
public void bang(Bullet b){
  int index = -1; //被撞的敌人的下标
  for(int i=0;i<flyings.length;i++){
    FlyingObject f = flyings[i];
	if(f.shootBy(b)){ //撞上了
      index = i;
	  break;
	}
  }
  if(index!=-1){ //撞上了
    FlyingObject one = flyings[index]; //获取被撞的敌人








    Airplane     implements Enemy
	BossAirplane implements Enemy
    BigYellowBee implements Enemy
	???          implements Enemy

    Airplane(5) BossAirplane(20) BigYellowBee(40)
    if(one instanceof Enemy){ //是敌人
	  Enemy e = (Enemy)one;
      score += e.getScore(); 
	}










	if(one instanceof Airplane){ //是敌人
	  Airplane e = (Airplane)one;
      score += e.getScore(); 
	}
    if(one instanceof BossAirplane){ //是敌人
	  BossAirplane e = (BossAirplane)one;
      score += e.getScore(); 
	}
	if(one instanceof BigYellowBee){ //是敌人
	  BigYellowBee e = (BigYellowBee)one;
      score += e.getScore(); 
	}












	if(one instanceof Award){ //是奖励
	  Award a = (Award)one;
      int type = a.getType();
      switch(type){
	  case Award.DOUBLE_FIRE:
	    hero.addDoubleFire();
		break;
      case Award.LIFE:
	    hero.addLife();
		break;
	  }
	}

  }
}

















//所有子弹与所有敌人撞
public void bangAction(){
  for(int i=0;i<bullets.length;i++){
    Bullet b = bullets[i];
    for(int j=0;j<flyings.length;j++){
	  FlyingObject f = flyings[j];
      if(f.shootBy(b)){
	    1.判断被撞敌人的类型:
		   若为敌机，则玩家得分
		   若为小蜜蜂，则玩家得奖励
		    判断奖励的类型:
			  若为命，则英雄机增命
			  若为火力，则英雄机增火力
	    2.敌人消失
	  }
	}
  }
}













若撞上了:
1.玩家得分
  英雄机得命、英雄机得火力
2.敌人消失













class FlyingObject{ //敌人
  public boolean shootBy(Bullet obj){
    this:敌人
	obj:子弹
  }
}








class Bullet{ //子弹
  public boolean shoot(FlyingObject obj){
    this:子弹
	obj:敌人
  }
}















//删除越界的飞行物(敌机+小蜜蜂+子弹)
public void outOfBounds(){ //10毫秒走一次
  int index = 0; //1)下标  2)计数器
  FlyingObject[] flyingLives = new FlyingObject[flyings.length];
  for(int i=0;i<flyings.length;i++){
    FlyingObject f = flyings[i];
    if(!f.outOfBounds()){ //不越界
	  flyingLives[index] = f;
	  index++;
	}
  }
  flyings = Arrays.copyOf(flyingLives,index);
}















50个对象，出界了20个

//删除越界的飞行物(敌机+小蜜蜂+子弹)
public void outOfBounds(){ //10毫秒走一次
  for(int i=0;i<flyings.length;i++){
    FlyingObject f = flyings[i];
    if(f.outOfBounds()){ //越界了
	  将越界的敌人从flyings中删除----缩容
	}
  }
}










flyings = Arrays.copyOf(flyings,flyings.length-1);






有一个方法---检测是否越界







减命
清空火力值



加分
得命或得火力








