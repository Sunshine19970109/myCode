回顾:
感想:
	1.做项目的时候肯定不是先写完计划书才写代码，初学者可以一边写计划书一边定义方法
	    可以先不做方法体，设计好一个写一个
	2.类可以做属性(比如银行卡)
1.final:最终的
	变量不能变、方法不能重写、类不可被继承
2.static final:常量
	必须声明同时初始化、类名来访问、不能改
	所有字母大写
	编译器在编译的时候被自动替换为具体的值、效率高
3、抽象方法:
	abstract，只有方法的定义，没有具体的实现
4.抽象类:
	abstract,包含抽象方法的类是抽象类
	不能被实例化，是需要被继承的，子类
		1)重写所有的抽象方法
		2)也声明为抽象类
		意义:
			1.封装共有的属性和行为--代码复用
			2、为所有子类提供统一的类型--向上造型
			3、包含抽象方法，为所有子类提供统一入口
			子类的具体实现不同但入口相同
5.接口:
	标准、规范，引用数据类型
	interface定义，只包含抽象方法和常量
	不能被实例化，是需要被实现的，实现类:
		必须重写所有抽象方法
	一个类可以实现多个接口，用逗号分隔
	若又继承又实现时，应先继承后实现
	接口可以继承接口
day01 作业答案
1. C	
2.
3.简述抽象类的意义:
	1.封装共有的属性和行为---代码复用
	2.为所有子类提供统一的类型---向上造型
	3.包含抽象方法，为所有子类提供统一的入口
	子类的方法实现不同但是入口相同
4
5.ABC





正课:
1.多态:
	1.意义:
		1.同一个对象指向不同的引用时，有不同的实现
		--行为的多态:cut()、run() 
		2.同一个对象被造型为不同的类型时，有不同的功能
		---对象的多态:我、水、你
	2.向上造型:
		1.父类型的引用指向子类型的对象
		2.能造型成为的类型有:父类、所有实现类
		3.能点出来什么，看引用类型
	3.强制类型转换(向下造型)，成功的条件:
		1.引用所指向的对象，就是该类型
		2.引用所指向的对象，就是该接口
	4.强转时若不符合如下两个条件，则发生ClassCastException类型转化异常
	建议在强转之前通过Instance of判断引用指向的类型是否是该类型
2.成员内部类:应用率不高
	1.类中套类，外面的称为外部类，里面的称为内部类
	可以在外部类中new对象
	2.内部类通常只服务于外部类，对外不具备可见性
	3.内部类通常只在外部类中创建
	4.内部类中可以访问外部类的成员(包括私有的)
	内部类中有个隐式的引用指向创建它的外部类对象
		语法:外部类名.this.
3.匿名内部类:应用率比较高
	1.若想创建一个类的对象，并且对象只被创建一次
	此时该类不必命名，称之为匿名内部类对象
	2.匿名内部类中访问外部的变量，该变量必须是final
4.面向对象总结:


设计规则:
1)先确定对象，在确定类
2)当代码重复时，将所有共有的属性和行为，抽象到父类中
3)所有子类行为都一样----设计为普通方法
    所有子类行为不一样----设计为抽象方法
4)部分子类共有的行为，抽象到接口
	符合既是也是用接口，要用接口中的部分方法--分割
	接口是对继承的单根行的扩展--多继承

final不可变的变量











