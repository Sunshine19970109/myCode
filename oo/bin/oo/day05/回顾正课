回顾:
1.内存管理:
	1.堆：所有new出来的对象(包括实例变量)
	2.堆栈:正在调中的方法中的所有局部变量(包括参数)
	3.方法区:.class字节码文件(包括方法、静态变量)
2.方法的重写(Override):
	1.发生在父子类中，方法名称相同，参数列表相同，方法体不同
	2.重写方法被调用时，看对象类型
3.重写与重载的区别:
	1.重写(Override)：
		1.发生在父子类中，方法名称相同，参数列表相同，方法体不同
		2.运行期绑定，看对象的类型调用方法
	2.重载(Overload)：
		1.发生在一个类中，方法名称相同，参数列表不同，方法体不同
		2.编译期绑定，看引用的类型绑定方法
4.package和import:
5.访问控制修饰符:
	1.public:公开的，任何类
	2.private：私有的，本类
	3.protected：受保护的，本类子类同包类
	4.默认的:什么也不写，本类，同包类
6.static：静态的
	1.静态变量:
		static,类方法区，一份，类名来访问
		所有对象共享的数据(图片、音频、视频。。。)
	2.静态方法:
		static，类，方法区，一份，类名点来访问
		没有隐式this,静态方法中不能直接访问实例成员变量
		方法的操作仅与参数相关而与对象无关
	2.静态块:
		static，类，类被加载期间自动执行，只执行一次
		初始化静态资源-（图片、音频、视频...）




正课:
1.final:最终的、不可变的------单独应用几率不高
	1.修饰变量:变量不可被改变
	2.修饰方法：方法不可被重写
	3.修饰类:类不能被继承
2.static final 常量:应用率高
	1.必须声明同时初始化
	2.常常通过类名来访问，不可被改变呢
	3.建议:常量名所有字母都大写，多个单词用_分隔开
	4.编译器在编译时将常量直接替换为具体的值，效率高
3.抽象方法：
	1.由abstract修饰，
	2.只有方法的定义没有具体的实现，没有方法体
4.抽象类:
	1.由abstract修饰
	2.包含抽象方法的类也必须抽象
	不包含抽象方法的类也可以声明抽象类
		所有子类方法一样，写成一般方法，子类方法不同写成抽象方法
	3.抽象类不能被实例化----因为不完整
	4.抽象类是需要被继承
	5.抽象类的意义:
		1.封装子类共有的属性和行为-----代码复用性好
		2.为所有子类提供统一类型-------向上造型
		3.可以包含抽象方法，为所有子类提供了统一的入口
		所有子类的实现不同，但入口一致的 
5.接口:
	1)是一个标准、规范-----制定方
	遵守了这个标准就能干某件事----------API
	2)是一种数据类型(引用类型)
	3)由interface来定义
		只能包含常量和抽象方法
	4)接口不能被实例化
	5)接口必须被实现/继承的，实现类/子类:
	必须重写接口中的所有抽象方法
	6)一个类可以实现多个接口，用逗号分隔
	若又继承又实现时，应先继承后实现
	7)接口可以继承接口
	类和类，接口和接口继承
	类和接口实现
	
银行卡系统

interface UnionPay{//银联接口
	void 存款();
	void 取款();
	void 转账():
	void 查询余额();
}

interface CCB extends UnionPay{
	void 支付燃气费();
}

interface ICBC extends UnionPay{//工行接口
	void 在线支付();
}
class ICBCImpl implements ICBC{农行接口
	public void 存款();
	public void 取款();
	public void 转账():
	public void 查询余额();
	public void 在线支付();
}

interface ABC extends UnionPay{
	void 支付电话费();
}
class ABCImpl implements ABC{
	public void 存款();
	public void 取款();
	public void 转账():
	public void 查询余额();
	public void 支付电话费();
}

interface Inter1{
	public static final int NUM = 5;
	public abstract void show();
	int COUNT = 6；//默认public static final
	void say();//默认public abstract
}
inteface Inter2 extends Inter1{
	void whatch();
}
class AOO implements Inter2{
	Inter2 inter2 = new Aoo();//直接向上造型
	Inter1 inter1 = new Aoo();//间接向上造型
}

abstract class Shape{
	double c;
	abstract double area();--不完整
}
class Square{//方形
	double c;
	double area(){
		return 0.0625*c*c;
	}
}

class Circle{//圆形
	double c;
	double area(){
		return 0.0796*c*c;
	}
}













